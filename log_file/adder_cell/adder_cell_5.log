
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+634 (git sha1 3414ee1, clang 3.8.0-2ubuntu4 -fPIC -Os)


-- Running command `read_verilog top.v; opt; opt_clean -purge; techmap; flatten; stat -top adder' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\adder_0'.
Generating RTLIL representation for module `\adder_1'.
Generating RTLIL representation for module `\adder_2'.
Generating RTLIL representation for module `\adder_3'.
Generating RTLIL representation for module `\adder_4'.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

2. Executing OPT pass (performing simple optimizations).

2.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module adder_4.
Optimizing module adder_3.
Optimizing module adder_2.
Optimizing module adder_1.
Optimizing module adder_0.

2.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\adder_4'.
<suppressed ~225 debug messages>
Finding identical cells in module `\adder_3'.
<suppressed ~234 debug messages>
Finding identical cells in module `\adder_2'.
<suppressed ~222 debug messages>
Finding identical cells in module `\adder_1'.
<suppressed ~225 debug messages>
Finding identical cells in module `\adder_0'.
<suppressed ~234 debug messages>
Removed a total of 380 cells.

2.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_0..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
  Optimizing cells in module \adder_4.
  Optimizing cells in module \adder_3.
  Optimizing cells in module \adder_2.
  Optimizing cells in module \adder_1.
  Optimizing cells in module \adder_0.
Performed a total of 0 changes.

2.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\adder_4'.
Finding identical cells in module `\adder_3'.
Finding identical cells in module `\adder_2'.
Finding identical cells in module `\adder_1'.
Finding identical cells in module `\adder_0'.
Removed a total of 0 cells.

2.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \adder_4..
Finding unused cells or wires in module \adder_3..
Finding unused cells or wires in module \adder_2..
Finding unused cells or wires in module \adder_1..
Finding unused cells or wires in module \adder_0..
Removed 0 unused cells and 1403 unused wires.
<suppressed ~6 debug messages>

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module adder_0.
Optimizing module adder_1.
Optimizing module adder_2.
Optimizing module adder_3.
Optimizing module adder_4.

2.9. Finished OPT passes. (There is nothing left to do.)

3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \adder_0..
Finding unused cells or wires in module \adder_1..
Finding unused cells or wires in module \adder_2..
Finding unused cells or wires in module \adder_3..
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 259 unused wires.
<suppressed ~259 debug messages>

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~2170 debug messages>

5. Executing FLATTEN pass (flatten design).
Using template adder_2 for cells of type adder_2.
Using template adder_4 for cells of type adder_4.
Using template adder_3 for cells of type adder_3.
Using template adder_0 for cells of type adder_0.
Using template adder_1 for cells of type adder_1.
<suppressed ~5 debug messages>
No more expansions possible.

6. Printing statistics.

=== adder ===

   Number of wires:               2819
   Number of wire bits:           2819
   Number of public wires:        1672
   Number of public wire bits:    1672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2170
     $_AND_                       1020
     $_NOT_                       1150

=== adder_0 ===

   Number of wires:                495
   Number of wire bits:            495
   Number of public wires:         261
   Number of public wire bits:     261
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                442
     $_AND_                        208
     $_NOT_                        234

=== adder_1 ===

   Number of wires:                476
   Number of wire bits:            476
   Number of public wires:         251
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                425
     $_AND_                        200
     $_NOT_                        225

=== adder_2 ===

   Number of wires:                485
   Number of wire bits:            485
   Number of public wires:         256
   Number of public wire bits:     256
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_AND_                        204
     $_NOT_                        229

=== adder_3 ===

   Number of wires:                495
   Number of wire bits:            495
   Number of public wires:         261
   Number of public wire bits:     261
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                442
     $_AND_                        208
     $_NOT_                        234

=== adder_4 ===

   Number of wires:                476
   Number of wire bits:            476
   Number of public wires:         251
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                425
     $_AND_                        200
     $_NOT_                        225

=== design hierarchy ===

   adder                             1

   Number of wires:               2819
   Number of wire bits:           2819
   Number of public wires:        1672
   Number of public wire bits:    1672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2170
     $_AND_                       1020
     $_NOT_                       1150

End of script. Logfile hash: f85da6c15b
CPU: user 0.52s system 0.01s, MEM: 54.07 MB total, 20.69 MB resident
Yosys 0.8+634 (git sha1 3414ee1, clang 3.8.0-2ubuntu4 -fPIC -Os)
Time spent: 27% 3x read_verilog (0 sec), 23% 2x opt_clean (0 sec), ...
