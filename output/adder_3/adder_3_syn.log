
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+ (git sha1 3de0568, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Running command `read_verilog output/partition/adder_3.v; synth -flatten; opt; opt_clean -purge; techmap; abc -liberty /home/jingxiao/blasys_private/asap7.lib -script abc.script; stat -liberty /home/jingxiao/blasys_private/asap7.lib ; write_verilog -noattr -noexpr output/adder_3/adder_3_syn.v;
' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `output/partition/adder_3.v' to AST representation.
Generating RTLIL representation for module `\adder_3'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Finding top of design hierarchy..
root of   0 design levels: adder_3             
Automatically selected adder_3 as design top module.

2.1.2. Analyzing design hierarchy..
Top module:  \adder_3

2.1.3. Analyzing design hierarchy..
Top module:  \adder_3
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.4. Executing OPT_EXPR pass (perform const folding).

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
  removed 24 unused temporary wires.
Removed 0 unused cells and 24 unused wires.

2.6. Executing CHECK pass (checking for obvious problems).
checking module adder_3..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:19$35' is identical to cell `$not$output/partition/adder_3.v:17$30'.
    Redirecting output \Y: $not$output/partition/adder_3.v:19$35_Y = $not$output/partition/adder_3.v:17$30_Y
    Removing $not cell `$not$output/partition/adder_3.v:19$35' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:19$36' is identical to cell `$not$output/partition/adder_3.v:15$25'.
    Redirecting output \Y: $not$output/partition/adder_3.v:19$36_Y = $not$output/partition/adder_3.v:15$25_Y
    Removing $not cell `$not$output/partition/adder_3.v:19$36' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:20$38' is identical to cell `$not$output/partition/adder_3.v:15$26'.
    Redirecting output \Y: $not$output/partition/adder_3.v:20$38_Y = $not$output/partition/adder_3.v:15$26_Y
    Removing $not cell `$not$output/partition/adder_3.v:20$38' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:27$55' is identical to cell `$not$output/partition/adder_3.v:25$50'.
    Redirecting output \Y: $not$output/partition/adder_3.v:27$55_Y = $not$output/partition/adder_3.v:25$50_Y
    Removing $not cell `$not$output/partition/adder_3.v:27$55' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:27$56' is identical to cell `$not$output/partition/adder_3.v:23$45'.
    Redirecting output \Y: $not$output/partition/adder_3.v:27$56_Y = $not$output/partition/adder_3.v:23$45_Y
    Removing $not cell `$not$output/partition/adder_3.v:27$56' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:28$58' is identical to cell `$not$output/partition/adder_3.v:23$46'.
    Redirecting output \Y: $not$output/partition/adder_3.v:28$58_Y = $not$output/partition/adder_3.v:23$46_Y
    Removing $not cell `$not$output/partition/adder_3.v:28$58' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:7$5' is identical to cell `$not$output/partition/adder_3.v:11$16'.
    Redirecting output \Y: $not$output/partition/adder_3.v:7$5_Y = $not$output/partition/adder_3.v:11$16_Y
    Removing $not cell `$not$output/partition/adder_3.v:7$5' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:7$6' is identical to cell `$not$output/partition/adder_3.v:12$18'.
    Redirecting output \Y: $not$output/partition/adder_3.v:7$6_Y = $not$output/partition/adder_3.v:12$18_Y
    Removing $not cell `$not$output/partition/adder_3.v:7$6' from module `\adder_3'.
  Cell `$not$output/partition/adder_3.v:9$10' is identical to cell `$not$output/partition/adder_3.v:11$15'.
    Redirecting output \Y: $not$output/partition/adder_3.v:9$10_Y = $not$output/partition/adder_3.v:11$15_Y
    Removing $not cell `$not$output/partition/adder_3.v:9$10' from module `\adder_3'.
Removed a total of 9 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_3.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
  removed 9 unused temporary wires.
Removed 0 unused cells and 33 unused wires.

2.7.8. Executing OPT_EXPR pass (perform const folding).

2.7.9. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder_3:
  created 0 $alu and 0 $macc cells.

2.10. Executing SHARE pass (SAT-based resource sharing).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_3.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.11.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.11.8. Executing OPT_EXPR pass (perform const folding).

2.11.9. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.13.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.13.5. Finished fast OPT passes.

2.14. Executing MEMORY pass.

2.14.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.14.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.14.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.14.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.16. Executing OPT pass (performing simple optimizations).

2.16.1. Executing OPT_EXPR pass (perform const folding).

2.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.16.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.16.5. Finished fast OPT passes.

2.17. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_3.
Performed a total of 0 changes.

2.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.18.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.18.8. Executing OPT_EXPR pass (perform const folding).

2.18.9. Finished OPT passes. (There is nothing left to do.)

2.19. Executing TECHMAP pass (map to technology primitives).

2.19.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping adder_3.$not$output/partition/adder_3.v:5$1 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:5$2 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:5$3 ($and) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:6$4 ($and) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:7$7 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:8$8 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:8$9 ($and) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:9$11 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:10$12 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:10$13 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:10$14 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:11$15 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:11$16 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:11$17 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:12$18 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:12$19 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:12$20 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:13$21 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:13$22 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:13$23 ($and) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:14$24 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:15$25 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:15$26 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:15$27 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:16$28 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:16$29 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:17$30 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:17$31 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:18$32 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:18$33 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:18$34 ($and) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:19$37 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:20$39 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:20$40 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:21$41 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:21$42 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:21$43 ($and) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:22$44 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:23$45 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:23$46 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:23$47 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:24$48 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:24$49 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:25$50 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:25$51 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:26$52 ($not) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:26$53 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:26$54 ($and) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:27$57 ($and) with simplemap.
Mapping adder_3.$not$output/partition/adder_3.v:28$59 ($not) with simplemap.
Mapping adder_3.$and$output/partition/adder_3.v:28$60 ($and) with simplemap.
No more expansions possible.

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.20.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 33 unused wires.

2.20.5. Finished fast OPT passes.

2.21. Executing ABC pass (technology mapping using ABC).

2.21.1. Extracting gate netlist of module `\adder_3' to `<abc-temp-dir>/input.blif'..
Extracted 51 gates and 58 wires to a netlist network with 7 inputs and 4 outputs.

2.21.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.21.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               XOR cells:        3
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        4
Removing temp directory.

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
  removing unused non-port wire \n10.
  removing unused non-port wire \n11.
  removing unused non-port wire \n12.
  removing unused non-port wire \n14.
  removing unused non-port wire \n15.
  removing unused non-port wire \n16.
  removing unused non-port wire \n17.
  removing unused non-port wire \n18.
  removing unused non-port wire \n19.
  removing unused non-port wire \n20.
  removing unused non-port wire \n22.
  removing unused non-port wire \n23.
  removing unused non-port wire \n24.
  removing unused non-port wire \n25.
  removing unused non-port wire \n26.
  removing unused non-port wire \n27.
  removing unused non-port wire \n28.
  removing unused non-port wire \n30.
  removing unused non-port wire \n8.
  removing unused non-port wire \n9.
  removed 58 unused temporary wires.
Removed 0 unused cells and 91 unused wires.

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \adder_3

2.23.2. Analyzing design hierarchy..
Top module:  \adder_3
Removed 0 unused modules.

2.24. Printing statistics.

=== adder_3 ===

   Number of wires:                 27
   Number of wire bits:             27
   Number of public wires:          15
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_ANDNOT_                       2
     $_AND_                          2
     $_AOI3_                         2
     $_NAND_                         1
     $_NOR_                          1
     $_NOT_                          1
     $_OAI3_                         1
     $_ORNOT_                        1
     $_OR_                           2
     $_XOR_                          3

2.25. Executing CHECK pass (checking for obvious problems).
checking module adder_3..
found and reported 0 problems.

3. Executing OPT pass (performing simple optimizations).

3.1. Executing OPT_EXPR pass (perform const folding).

3.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_3.
Performed a total of 0 changes.

3.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_3'.
Removed a total of 0 cells.

3.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
Removed 0 unused cells and 91 unused wires.

3.8. Executing OPT_EXPR pass (perform const folding).

3.9. Finished OPT passes. (There is nothing left to do.)

4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_3..
  removing unused non-port wire \n13.
  removing unused non-port wire \n21.
  removing unused non-port wire \n29.
  removing unused non-port wire \n31.
  removed 4 unused temporary wires.
Removed 0 unused cells and 95 unused wires.

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
No more expansions possible.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\adder_3' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 23 wires to a netlist network with 7 inputs and 4 outputs.

6.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/jingxiao/blasys_private/asap7.lib 
ABC: Parsing finished successfully.  Parsing time =     0.90 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "ASYNC_DFFHx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx1_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx2_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx3_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx4_ASAP7_75t_L".
ABC: Library "asap7" from "/home/jingxiao/blasys_private/asap7.lib" has 159 cells (26 skipped: 23 seq; 0 tri-state; 3 no func).  Time =     1.16 sec
ABC: Memory =   67.27 MB. Time =     1.16 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAx1_ASAP7_75t_L").
ABC: + source /home/jingxiao/BLASYS_PART/abc.script 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:   A2O1A1Ixp33_ASAP7_75t_L cells:        4
ABC RESULTS:   A2O1A1O1Ixp25_ASAP7_75t_L cells:        1
ABC RESULTS:   AND2x2_ASAP7_75t_L cells:        1
ABC RESULTS:   AOI21xp33_ASAP7_75t_L cells:        1
ABC RESULTS:   INVx1_ASAP7_75t_L cells:        9
ABC RESULTS:   MAJIxp5_ASAP7_75t_L cells:        1
ABC RESULTS:   NAND2xp33_ASAP7_75t_L cells:        3
ABC RESULTS:   NOR2xp33_ASAP7_75t_L cells:        4
ABC RESULTS:   OAI211xp5_ASAP7_75t_L cells:        1
ABC RESULTS:   OAI21xp33_ASAP7_75t_L cells:        3
ABC RESULTS:   OAI311xp33_ASAP7_75t_L cells:        1
ABC RESULTS:   OR2x4_ASAP7_75t_L cells:        1
ABC RESULTS:   XOR2x2_ASAP7_75t_L cells:        2
ABC RESULTS:        internal signals:       12
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        4
Removing temp directory.

7. Printing statistics.

=== adder_3 ===

   Number of wires:                 62
   Number of wire bits:             62
   Number of public wires:          11
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     A2O1A1Ixp33_ASAP7_75t_L         4
     A2O1A1O1Ixp25_ASAP7_75t_L       1
     AND2x2_ASAP7_75t_L              1
     AOI21xp33_ASAP7_75t_L           1
     INVx1_ASAP7_75t_L               9
     MAJIxp5_ASAP7_75t_L             1
     NAND2xp33_ASAP7_75t_L           3
     NOR2xp33_ASAP7_75t_L            4
     OAI211xp5_ASAP7_75t_L           1
     OAI21xp33_ASAP7_75t_L           3
     OAI311xp33_ASAP7_75t_L          1
     OR2x4_ASAP7_75t_L               1
     XOR2x2_ASAP7_75t_L              2

   Chip area for this module: 30.559680

8. Executing Verilog backend.
Dumping module `\adder_3'.

End of script. Logfile hash: 6c04ea63de
CPU: user 1.21s system 0.08s, MEM: 162.21 MB total, 135.19 MB resident
Yosys 0.7+ (git sha1 3de0568, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 88% 2x stat (1 sec), 2% 13x opt_expr (0 sec), ...
