
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+ (git sha1 3de0568, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Running command `read_verilog output/adder_1/adder_1_approx_k=3.v; synth -flatten; opt; opt_clean -purge; techmap; abc -liberty /home/jingxiao/blasys_private/asap7.lib -script abc.script; stat -liberty /home/jingxiao/blasys_private/asap7.lib ; write_verilog -noattr -noexpr output/adder_1/adder_1_approx_k=3_syn.v;
' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `output/adder_1/adder_1_approx_k=3.v' to AST representation.
Generating RTLIL representation for module `\adder_1'.
Generating RTLIL representation for module `\adder_1_w3'.
Generating RTLIL representation for module `\adder_1_h3'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Finding top of design hierarchy..
root of   0 design levels: adder_1_h3          
root of   0 design levels: adder_1_w3          
root of   1 design levels: adder_1             
Automatically selected adder_1 as design top module.

2.1.2. Analyzing design hierarchy..
Top module:  \adder_1
Used module:     \adder_1_h3
Used module:     \adder_1_w3

2.1.3. Analyzing design hierarchy..
Top module:  \adder_1
Used module:     \adder_1_h3
Used module:     \adder_1_w3
Removed 0 unused modules.
Mapping positional arguments of cell adder_1.DUT2 (adder_1_h3).
Mapping positional arguments of cell adder_1.DUT1 (adder_1_w3).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3. Executing FLATTEN pass (flatten design).
Mapping adder_1.DUT1 using adder_1_w3.
Mapping adder_1.DUT2 using adder_1_h3.
No more expansions possible.
Deleting now unused module adder_1_h3.
Deleting now unused module adder_1_w3.

2.4. Executing OPT_EXPR pass (perform const folding).

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
  removed 3 unused temporary wires.
Removed 0 unused cells and 3 unused wires.

2.6. Executing CHECK pass (checking for obvious problems).
checking module adder_1..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$17' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$17_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$17' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$28' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$21'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$28_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$21_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$28' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$29' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$22'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$29_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$22_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$29' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$6' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$6_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$6' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$34' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$21'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$34_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$21_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$34' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$36' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$36_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$36' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$39' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$39_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$39' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$43' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$43_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$43' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$45' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$16'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$45_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$16_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$45' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$46' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$46_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:13$46' from module `\adder_1'.
  Cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:14$54' is identical to cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:14$54_Y = $techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:14$54' from module `\adder_1'.
  Cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$37' is identical to cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$4'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$37_Y = $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$4_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$37' from module `\adder_1'.
  Cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$47' is identical to cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$18'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$47_Y = $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$18_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$47' from module `\adder_1'.
  Cell `$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:12$31' is identical to cell `$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:12$25'.
    Redirecting output \Y: $techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:12$31_Y = $techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:12$25_Y
    Removing $xor cell `$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:12$31' from module `\adder_1'.
  Cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$15' is identical to cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$44'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$15_Y = $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$44_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$15' from module `\adder_1'.
  Cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$19' is identical to cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$48'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$19_Y = $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$48_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$19' from module `\adder_1'.
  Cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$38' is identical to cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$5'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$38_Y = $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$5_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$38' from module `\adder_1'.
  Cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$40' is identical to cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$7'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$40_Y = $techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$7_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$40' from module `\adder_1'.
  Cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$49' is identical to cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$20'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$49_Y = $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$20_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$49' from module `\adder_1'.
  Cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$41' is identical to cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$8'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$41_Y = $techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$8_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$41' from module `\adder_1'.
Removed a total of 20 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\DUT1.$ternary$output/adder_1/adder_1_approx_k=3.v:14$56 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_1.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
  removed 20 unused temporary wires.
Removed 0 unused cells and 23 unused wires.

2.7.8. Executing OPT_EXPR pass (perform const folding).

2.7.9. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder_1:
  created 0 $alu and 0 $macc cells.

2.10. Executing SHARE pass (SAT-based resource sharing).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\DUT1.$ternary$output/adder_1/adder_1_approx_k=3.v:14$56 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_1.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.11.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.11.8. Executing OPT_EXPR pass (perform const folding).

2.11.9. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.13.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.13.5. Finished fast OPT passes.

2.14. Executing MEMORY pass.

2.14.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.14.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.14.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.14.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.16. Executing OPT pass (performing simple optimizations).

2.16.1. Executing OPT_EXPR pass (perform const folding).

2.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.16.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.16.5. Finished fast OPT passes.

2.17. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\DUT1.$ternary$output/adder_1/adder_1_approx_k=3.v:14$56 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_1.
Performed a total of 0 changes.

2.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.18.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.18.8. Executing OPT_EXPR pass (perform const folding).

2.18.9. Finished OPT passes. (There is nothing left to do.)

2.19. Executing TECHMAP pass (map to technology primitives).

2.19.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping adder_1.$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:14$55 ($xor) with simplemap.
Mapping adder_1.$techmap\DUT1.$ternary$output/adder_1/adder_1_approx_k=3.v:14$56 ($mux) with simplemap.
Mapping adder_1.$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:14$53 ($xor) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:13$52 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$51 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:13$50 ($xor) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$48 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$44 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:13$42 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:13$35 ($xor) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$33 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$32 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$30 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$27 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$26 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:12$25 ($xor) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$24 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$23 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$22 ($not) with simplemap.
Mapping adder_1.$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$21 ($not) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$20 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$18 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$16 ($not) with simplemap.
Mapping adder_1.$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$14 ($not) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$13 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$12 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$11 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$10 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$9 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$8 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$7 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$and$output/adder_1/adder_1_approx_k=3.v:12$5 ($and) with simplemap.
Mapping adder_1.$techmap\DUT1.$or$output/adder_1/adder_1_approx_k=3.v:12$4 ($or) with simplemap.
Mapping adder_1.$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$3 ($not) with simplemap.
Mapping adder_1.$techmap\DUT1.$xor$output/adder_1/adder_1_approx_k=3.v:12$2 ($xor) with simplemap.
Mapping adder_1.$techmap\DUT1.$not$output/adder_1/adder_1_approx_k=3.v:12$1 ($not) with simplemap.
No more expansions possible.

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

2.20.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 23 unused wires.

2.20.5. Finished fast OPT passes.

2.21. Executing ABC pass (technology mapping using ABC).

2.21.1. Extracting gate netlist of module `\adder_1' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 43 wires to a netlist network with 7 inputs and 3 outputs.

2.21.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.21.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        3
Removing temp directory.

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$137$auto$blifparse.cc:346:parse_blif$143' in module `adder_1'.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
  Cell `$abc$137$auto$blifparse.cc:346:parse_blif$156' is identical to cell `$abc$137$auto$blifparse.cc:346:parse_blif$153'.
    Redirecting output \Y: $abc$137$n29 = $abc$137$n26
    Removing $_XNOR_ cell `$abc$137$auto$blifparse.cc:346:parse_blif$156' from module `\adder_1'.
Removed a total of 1 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
  removed 44 unused temporary wires.
Removed 0 unused cells and 67 unused wires.

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \adder_1

2.23.2. Analyzing design hierarchy..
Top module:  \adder_1
Removed 0 unused modules.

2.24. Printing statistics.

=== adder_1 ===

   Number of wires:                 50
   Number of wire bits:             50
   Number of public wires:          31
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $_ANDNOT_                       5
     $_AOI3_                         2
     $_AOI4_                         1
     $_MUX_                          1
     $_NAND_                         1
     $_NOR_                          1
     $_NOT_                          2
     $_OAI3_                         1
     $_OAI4_                         1
     $_ORNOT_                        3
     $_OR_                           1
     $_XNOR_                         3

2.25. Executing CHECK pass (checking for obvious problems).
checking module adder_1..
found and reported 0 problems.

3. Executing OPT pass (performing simple optimizations).

3.1. Executing OPT_EXPR pass (perform const folding).

3.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_1.
Performed a total of 0 changes.

3.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_1'.
Removed a total of 0 cells.

3.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
Removed 0 unused cells and 67 unused wires.

3.8. Executing OPT_EXPR pass (perform const folding).

3.9. Finished OPT passes. (There is nothing left to do.)

4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_1..
  removing unused non-port wire \DUT1.in0.
  removing unused non-port wire \DUT1.in1.
  removing unused non-port wire \DUT1.in2.
  removing unused non-port wire \DUT1.in3.
  removing unused non-port wire \DUT1.in4.
  removing unused non-port wire \DUT1.in5.
  removing unused non-port wire \DUT1.in6.
  removing unused non-port wire \DUT1.k0.
  removing unused non-port wire \DUT1.k1.
  removing unused non-port wire \DUT1.k2.
  removing unused non-port wire \DUT2.k0.
  removing unused non-port wire \DUT2.k1.
  removing unused non-port wire \DUT2.k2.
  removing unused non-port wire \DUT2.out0.
  removing unused non-port wire \DUT2.out1.
  removing unused non-port wire \DUT2.out2.
  removing unused non-port wire \DUT2.out3.
  removing unused non-port wire \k0.
  removing unused non-port wire \k1.
  removing unused non-port wire \k2.
  removed 20 unused temporary wires.
Removed 0 unused cells and 87 unused wires.

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
No more expansions possible.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\adder_1' to `<abc-temp-dir>/input.blif'..
Extracted 22 gates and 29 wires to a netlist network with 7 inputs and 3 outputs.

6.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/jingxiao/blasys_private/asap7.lib 
ABC: Parsing finished successfully.  Parsing time =     0.94 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "ASYNC_DFFHx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx1_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx2_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx3_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx4_ASAP7_75t_L".
ABC: Library "asap7" from "/home/jingxiao/blasys_private/asap7.lib" has 159 cells (26 skipped: 23 seq; 0 tri-state; 3 no func).  Time =     1.20 sec
ABC: Memory =   67.27 MB. Time =     1.20 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAx1_ASAP7_75t_L").
ABC: + source /home/jingxiao/BLASYS_PART/abc.script 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:   A2O1A1Ixp33_ASAP7_75t_L cells:        4
ABC RESULTS:   AND2x2_ASAP7_75t_L cells:        1
ABC RESULTS:   AOI21xp33_ASAP7_75t_L cells:        1
ABC RESULTS:   INVx1_ASAP7_75t_L cells:        6
ABC RESULTS:   MAJIxp5_ASAP7_75t_L cells:        1
ABC RESULTS:   NAND2xp33_ASAP7_75t_L cells:        2
ABC RESULTS:   NOR2xp33_ASAP7_75t_L cells:        6
ABC RESULTS:   OAI21xp33_ASAP7_75t_L cells:        3
ABC RESULTS:   XOR2x2_ASAP7_75t_L cells:        2
ABC RESULTS:        internal signals:       19
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        3
Removing temp directory.

7. Printing statistics.

=== adder_1 ===

   Number of wires:                 63
   Number of wire bits:             63
   Number of public wires:          11
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     A2O1A1Ixp33_ASAP7_75t_L         4
     AND2x2_ASAP7_75t_L              1
     AOI21xp33_ASAP7_75t_L           1
     INVx1_ASAP7_75t_L               6
     MAJIxp5_ASAP7_75t_L             1
     NAND2xp33_ASAP7_75t_L           2
     NOR2xp33_ASAP7_75t_L            6
     OAI21xp33_ASAP7_75t_L           3
     XOR2x2_ASAP7_75t_L              2

   Chip area for this module: 24.494400

8. Executing Verilog backend.
Dumping module `\adder_1'.

End of script. Logfile hash: 5bac7060eb
CPU: user 1.22s system 0.10s, MEM: 162.20 MB total, 135.12 MB resident
Yosys 0.7+ (git sha1 3de0568, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 89% 2x stat (1 sec), 2% 14x opt_clean (0 sec), ...
