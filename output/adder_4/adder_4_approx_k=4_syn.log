
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+ (git sha1 3de0568, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Running command `read_verilog output/adder_4/adder_4_approx_k=4.v; synth -flatten; opt; opt_clean -purge; techmap; abc -liberty /home/jingxiao/blasys_private/asap7.lib -script abc.script; stat -liberty /home/jingxiao/blasys_private/asap7.lib ; write_verilog -noattr -noexpr output/adder_4/adder_4_approx_k=4_syn.v;
' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `output/adder_4/adder_4_approx_k=4.v' to AST representation.
Generating RTLIL representation for module `\adder_4'.
Generating RTLIL representation for module `\adder_4_w4'.
Generating RTLIL representation for module `\adder_4_h4'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Finding top of design hierarchy..
root of   0 design levels: adder_4_h4          
root of   0 design levels: adder_4_w4          
root of   1 design levels: adder_4             
Automatically selected adder_4 as design top module.

2.1.2. Analyzing design hierarchy..
Top module:  \adder_4
Used module:     \adder_4_h4
Used module:     \adder_4_w4

2.1.3. Analyzing design hierarchy..
Top module:  \adder_4
Used module:     \adder_4_h4
Used module:     \adder_4_w4
Removed 0 unused modules.
Mapping positional arguments of cell adder_4.DUT2 (adder_4_h4).
Mapping positional arguments of cell adder_4.DUT1 (adder_4_w4).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3. Executing FLATTEN pass (flatten design).
Mapping adder_4.DUT1 using adder_4_w4.
Mapping adder_4.DUT2 using adder_4_h4.
No more expansions possible.
Deleting now unused module adder_4_h4.
Deleting now unused module adder_4_w4.

2.4. Executing OPT_EXPR pass (perform const folding).

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
  removed 4 unused temporary wires.
Removed 0 unused cells and 4 unused wires.

2.6. Executing CHECK pass (checking for obvious problems).
checking module adder_4..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$62' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$13'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$62_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$13_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$62' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$23' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$23_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$23' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$39' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$29'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$39_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$29_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$39' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$40' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$30'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$40_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$30_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$40' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$42' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$42_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$42' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$43' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$34'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$43_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$34_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$43' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$45' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$29'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$45_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$29_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$45' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$46' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$30'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$46_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$30_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$46' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$6' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$6_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$6' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$52' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$29'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$52_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$29_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$52' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$54' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$54_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$54' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$57' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$57_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$57' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$65' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$65_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$65' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$67' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$22'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$67_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$22_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$67' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$68' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$68_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$68' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$72' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$72_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$72' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$73' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$34'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$73_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$34_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$73' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$79' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$79_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$79' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$80' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$34'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$80_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$34_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:13$80' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$85' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$85_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$85' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$87' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$87_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$87' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$90' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$90_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$90' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$94' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$94_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$94' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$96' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$22'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$96_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$22_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$96' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$97' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$97_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:14$97' from module `\adder_4'.
  Cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:15$105' is identical to cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20'.
    Redirecting output \Y: $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:15$105_Y = $techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20_Y
    Removing $not cell `$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:15$105' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$47' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$31'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$47_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$31_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$47' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$9' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$14'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$9_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$14_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$9' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$55' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$4'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$55_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$4_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$55' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$60' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$11'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$60_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$11_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$60' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$69' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$24'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$69_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$24_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$69' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$74' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$35'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$74_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$35_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$74' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$88' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$4'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$88_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$4_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$88' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$98' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$24'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$98_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$24_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$98' from module `\adder_4'.
  Cell `$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:12$38' is identical to cell `$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:12$27'.
    Redirecting output \Y: $techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:12$38_Y = $techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:12$27_Y
    Removing $xor cell `$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:12$38' from module `\adder_4'.
  Cell `$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:13$82' is identical to cell `$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:13$76'.
    Redirecting output \Y: $techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:13$82_Y = $techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:13$76_Y
    Removing $xor cell `$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:13$82' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$56' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$5'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$56_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$5_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$56' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$58' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$7'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$58_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$7_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$58' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$66' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$21'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$66_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$21_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$66' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$70' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$25'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$70_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$25_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$70' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$81' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$44'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$81_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$44_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$81' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$59' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$8'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$59_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$8_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$59' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$89' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$5'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$89_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$5_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$89' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$91' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$7'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$91_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$7_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$91' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$71' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$26'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$71_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$26_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$71' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$95' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$21'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$95_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$21_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$95' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$92' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$8'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$92_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$8_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$92' from module `\adder_4'.
  Cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$99' is identical to cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$25'.
    Redirecting output \Y: $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$99_Y = $techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$25_Y
    Removing $and cell `$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$99' from module `\adder_4'.
  Cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$100' is identical to cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$26'.
    Redirecting output \Y: $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$100_Y = $techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$26_Y
    Removing $or cell `$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$100' from module `\adder_4'.
Removed a total of 49 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\DUT1.$ternary$output/adder_4/adder_4_approx_k=4.v:15$107 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_4.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
  removed 49 unused temporary wires.
Removed 0 unused cells and 53 unused wires.

2.7.8. Executing OPT_EXPR pass (perform const folding).

2.7.9. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder_4:
  created 0 $alu and 0 $macc cells.

2.10. Executing SHARE pass (SAT-based resource sharing).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\DUT1.$ternary$output/adder_4/adder_4_approx_k=4.v:15$107 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_4.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.11.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.11.8. Executing OPT_EXPR pass (perform const folding).

2.11.9. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.13.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.13.5. Finished fast OPT passes.

2.14. Executing MEMORY pass.

2.14.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.14.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.14.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.14.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.16. Executing OPT pass (performing simple optimizations).

2.16.1. Executing OPT_EXPR pass (perform const folding).

2.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.16.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.16.5. Finished fast OPT passes.

2.17. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\DUT1.$ternary$output/adder_4/adder_4_approx_k=4.v:15$107 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_4.
Performed a total of 0 changes.

2.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.18.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.18.8. Executing OPT_EXPR pass (perform const folding).

2.18.9. Finished OPT passes. (There is nothing left to do.)

2.19. Executing TECHMAP pass (map to technology primitives).

2.19.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:15$106 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$ternary$output/adder_4/adder_4_approx_k=4.v:15$107 ($mux) with simplemap.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:15$104 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:14$103 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$102 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:14$101 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:14$93 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:14$86 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$84 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$83 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$78 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$77 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:13$76 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$75 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$64 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:13$63 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:13$61 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:13$53 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$51 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$50 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$49 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$48 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$44 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$41 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$37 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$36 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$35 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$34 ($not) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$33 ($not) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$32 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$31 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$30 ($not) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$29 ($not) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$28 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:12$27 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$26 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$25 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$24 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$22 ($not) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$21 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$20 ($not) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$19 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$18 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$17 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$16 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$15 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$14 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$13 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$12 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$11 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$10 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$8 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$7 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$and$output/adder_4/adder_4_approx_k=4.v:12$5 ($and) with simplemap.
Mapping adder_4.$techmap\DUT1.$or$output/adder_4/adder_4_approx_k=4.v:12$4 ($or) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$3 ($not) with simplemap.
Mapping adder_4.$techmap\DUT1.$xor$output/adder_4/adder_4_approx_k=4.v:12$2 ($xor) with simplemap.
Mapping adder_4.$techmap\DUT1.$not$output/adder_4/adder_4_approx_k=4.v:12$1 ($not) with simplemap.
No more expansions possible.

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.20.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 53 unused wires.

2.20.5. Finished fast OPT passes.

2.21. Executing ABC pass (technology mapping using ABC).

2.21.1. Extracting gate netlist of module `\adder_4' to `<abc-temp-dir>/input.blif'..
Extracted 58 gates and 67 wires to a netlist network with 9 inputs and 4 outputs.

2.21.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.21.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:       54
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        4
Removing temp directory.

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$210$auto$blifparse.cc:346:parse_blif$216' in module `adder_4'.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
  removed 67 unused temporary wires.
Removed 0 unused cells and 120 unused wires.

2.22.5. Finished fast OPT passes.

2.23. Executing HIERARCHY pass (managing design hierarchy).

2.23.1. Analyzing design hierarchy..
Top module:  \adder_4

2.23.2. Analyzing design hierarchy..
Top module:  \adder_4
Removed 0 unused modules.

2.24. Printing statistics.

=== adder_4 ===

   Number of wires:                 72
   Number of wire bits:             72
   Number of public wires:          40
   Number of public wire bits:      40
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       5
     $_AND_                          1
     $_AOI3_                         5
     $_AOI4_                         1
     $_MUX_                          1
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                          4
     $_OAI3_                         3
     $_OAI4_                         1
     $_ORNOT_                        3
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          2

2.25. Executing CHECK pass (checking for obvious problems).
checking module adder_4..
found and reported 0 problems.

3. Executing OPT pass (performing simple optimizations).

3.1. Executing OPT_EXPR pass (perform const folding).

3.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_4.
Performed a total of 0 changes.

3.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_4'.
Removed a total of 0 cells.

3.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
Removed 0 unused cells and 120 unused wires.

3.8. Executing OPT_EXPR pass (perform const folding).

3.9. Finished OPT passes. (There is nothing left to do.)

4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_4..
  removing unused non-port wire \DUT1.in0.
  removing unused non-port wire \DUT1.in1.
  removing unused non-port wire \DUT1.in2.
  removing unused non-port wire \DUT1.in3.
  removing unused non-port wire \DUT1.in4.
  removing unused non-port wire \DUT1.in5.
  removing unused non-port wire \DUT1.in6.
  removing unused non-port wire \DUT1.in7.
  removing unused non-port wire \DUT1.in8.
  removing unused non-port wire \DUT1.k0.
  removing unused non-port wire \DUT1.k1.
  removing unused non-port wire \DUT1.k2.
  removing unused non-port wire \DUT1.k3.
  removing unused non-port wire \DUT2.k0.
  removing unused non-port wire \DUT2.k1.
  removing unused non-port wire \DUT2.k2.
  removing unused non-port wire \DUT2.k3.
  removing unused non-port wire \DUT2.out0.
  removing unused non-port wire \DUT2.out1.
  removing unused non-port wire \DUT2.out2.
  removing unused non-port wire \DUT2.out3.
  removing unused non-port wire \DUT2.out4.
  removing unused non-port wire \k0.
  removing unused non-port wire \k1.
  removing unused non-port wire \k2.
  removing unused non-port wire \k3.
  removed 26 unused temporary wires.
Removed 0 unused cells and 146 unused wires.

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
No more expansions possible.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\adder_4' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 45 wires to a netlist network with 9 inputs and 4 outputs.

6.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/jingxiao/blasys_private/asap7.lib 
ABC: Parsing finished successfully.  Parsing time =     0.95 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "ASYNC_DFFHx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQNx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFHQx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQNx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFLQx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DHLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx1_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx2_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ICGx3_ASAP7_75t_L" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFHx4_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx1_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx2_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx3_ASAP7_75t_L".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFLx4_ASAP7_75t_L".
ABC: Library "asap7" from "/home/jingxiao/blasys_private/asap7.lib" has 159 cells (26 skipped: 23 seq; 0 tri-state; 3 no func).  Time =     1.21 sec
ABC: Memory =   67.27 MB. Time =     1.21 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAx1_ASAP7_75t_L").
ABC: + source /home/jingxiao/BLASYS_PART/abc.script 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:   A2O1A1Ixp33_ASAP7_75t_L cells:        5
ABC RESULTS:   AND2x2_ASAP7_75t_L cells:        1
ABC RESULTS:   AO21x2_ASAP7_75t_L cells:        1
ABC RESULTS:   AOI21xp33_ASAP7_75t_L cells:        1
ABC RESULTS:   AOI22xp33_ASAP7_75t_L cells:        1
ABC RESULTS:   INVx1_ASAP7_75t_L cells:        8
ABC RESULTS:   MAJIxp5_ASAP7_75t_L cells:        1
ABC RESULTS:   NAND2xp33_ASAP7_75t_L cells:        3
ABC RESULTS:   NOR2xp33_ASAP7_75t_L cells:        8
ABC RESULTS:   O2A1O1Ixp33_ASAP7_75t_L cells:        2
ABC RESULTS:   OAI21xp33_ASAP7_75t_L cells:        4
ABC RESULTS:   XOR2x2_ASAP7_75t_L cells:        3
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        4
Removing temp directory.

7. Printing statistics.

=== adder_4 ===

   Number of wires:                 93
   Number of wire bits:             93
   Number of public wires:          14
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 38
     A2O1A1Ixp33_ASAP7_75t_L         5
     AND2x2_ASAP7_75t_L              1
     AO21x2_ASAP7_75t_L              1
     AOI21xp33_ASAP7_75t_L           1
     AOI22xp33_ASAP7_75t_L           1
     INVx1_ASAP7_75t_L               8
     MAJIxp5_ASAP7_75t_L             1
     NAND2xp33_ASAP7_75t_L           3
     NOR2xp33_ASAP7_75t_L            8
     O2A1O1Ixp33_ASAP7_75t_L         2
     OAI21xp33_ASAP7_75t_L           4
     XOR2x2_ASAP7_75t_L              3

   Chip area for this module: 35.458560

8. Executing Verilog backend.
Dumping module `\adder_4'.

End of script. Logfile hash: 298768f3ff
CPU: user 1.23s system 0.08s, MEM: 162.29 MB total, 135.19 MB resident
Yosys 0.7+ (git sha1 3de0568, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 86% 2x stat (1 sec), 2% 14x opt_clean (0 sec), ...
